/** Generated by YAKINDU Statechart Tools code generator. */

import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import java.util.LinkedList;
import java.util.Queue;

public class Microwave implements IStatemachine, ITimed {
	public enum State {
		MICROWAVE_INIT,
		MICROWAVE_PORTEOUVERTE,
		MICROWAVE_CUISSON,
		MICROWAVE_CUISSON_CUISSON_HIGH,
		MICROWAVE_CUISSON_CUISSON_LOW,
		MICROWAVE_CUISSON_CUISSON_ENTRERTEMPS,
		MICROWAVE_CUISSON_CUISSON_ENTRERTEMPS_DIGITS_ENTRERNUMEROS,
		MICROWAVE_CUISSON_CUISSON_DEBUT,
		MICROWAVE_CUISSON_CUISSON_DEBUT_COMPTEUR_ITERATION,
		MICROWAVE_CUISSON_CUISSON_DEBUT_COMPTEUR_ITERATION_ITERATION_SECONDE_TIMERMINUTE,
		MICROWAVE_CUISSON_CUISSON_DEBUT_COMPTEUR_ITERATION_ITERATION_SECONDE_TIMERSECONDS,
		MICROWAVE_CUISSON_CUISSON_DEBUT_COMPTEUR_IDLE,
		MICROWAVE_CUISSON_CUISSON_FIN,
		MICROWAVE_CUISSON_CUISSON_FIN_BEEP_ALARMEACTIVE,
		MICROWAVE_CUISSON_CUISSON_FIN_BEEP_ALARMEINACTIVE,
		MICROWAVE_PORTEOUVERTECUISSON,
		$NULLSTATE$
	};
	
	private State[] historyVector = new State[5];
	private final State[] stateVector = new State[1];
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[4];
	
	private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();
	private long timerLength;
	
	protected long getTimerLength() {
		return timerLength;
	}
	
	protected void setTimerLength(long value) {
		this.timerLength = value;
	}
	
	
	private long time;
	
	protected long getTime() {
		return time;
	}
	
	protected void setTime(long value) {
		this.time = value;
	}
	
	
	private long val;
	
	protected long getVal() {
		return val;
	}
	
	protected void setVal(long value) {
		this.val = value;
	}
	
	
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public Microwave() {
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		for (int i = 0; i < 5; i++) {
			historyVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		setPower(0);
		
		setTimerLength(0);
		
		setTime(0);
		
		setVal(0);
		
		isExecuting = false;
	}
	
	public void enter() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		if (this.operationCallback == null) {
			throw new IllegalStateException("Operation callback must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		enterSequence_Microwave_default();
		isExecuting = false;
	}
	
	public void exit() {
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		exitSequence_Microwave();
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		high = false;
		low = false;
		digit = false;
		timer = false;
		start = false;
		stop = false;
		open = false;
		close = false;
		timeEvents[0] = false;
		timeEvents[1] = false;
		timeEvents[2] = false;
		timeEvents[3] = false;
	}
	
	private void microStep() {
		switch (stateVector[0]) {
		case MICROWAVE_INIT:
			microwave_Init_react(-1);
			break;
		case MICROWAVE_PORTEOUVERTE:
			microwave_PorteOuverte_react(-1);
			break;
		case MICROWAVE_CUISSON_CUISSON_HIGH:
			microwave_Cuisson_cuisson_High_react(-1);
			break;
		case MICROWAVE_CUISSON_CUISSON_LOW:
			microwave_Cuisson_cuisson_Low_react(-1);
			break;
		case MICROWAVE_CUISSON_CUISSON_ENTRERTEMPS_DIGITS_ENTRERNUMEROS:
			microwave_Cuisson_cuisson_EntrerTemps_digits_EntrerNumeros_react(-1);
			break;
		case MICROWAVE_CUISSON_CUISSON_DEBUT_COMPTEUR_ITERATION_ITERATION_SECONDE_TIMERMINUTE:
			microwave_Cuisson_cuisson_Debut_compteur_Iteration_iteration_seconde_TimerMinute_react(-1);
			break;
		case MICROWAVE_CUISSON_CUISSON_DEBUT_COMPTEUR_ITERATION_ITERATION_SECONDE_TIMERSECONDS:
			microwave_Cuisson_cuisson_Debut_compteur_Iteration_iteration_seconde_TimerSeconds_react(-1);
			break;
		case MICROWAVE_CUISSON_CUISSON_DEBUT_COMPTEUR_IDLE:
			microwave_Cuisson_cuisson_Debut_compteur_Idle_react(-1);
			break;
		case MICROWAVE_CUISSON_CUISSON_FIN_BEEP_ALARMEACTIVE:
			microwave_Cuisson_cuisson_Fin_beep_AlarmeActive_react(-1);
			break;
		case MICROWAVE_CUISSON_CUISSON_FIN_BEEP_ALARMEINACTIVE:
			microwave_Cuisson_cuisson_Fin_beep_AlarmeInactive_react(-1);
			break;
		case MICROWAVE_PORTEOUVERTECUISSON:
			microwave_PorteOuverteCuisson_react(-1);
			break;
		default:
			break;
		}
	}
	
	private void runCycle() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		if (this.operationCallback == null) {
			throw new IllegalStateException("Operation callback must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		nextEvent();
		do { 
			microStep();
			
			clearInEvents();
			
			nextEvent();
		} while ((((((((((((high || low) || digit) || timer) || start) || stop) || open) || close) || timeEvents[0]) || timeEvents[1]) || timeEvents[2]) || timeEvents[3]));
		
		isExecuting = false;
	}
	
	protected void nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return;
		}
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MICROWAVE_INIT:
			return stateVector[0] == State.MICROWAVE_INIT;
		case MICROWAVE_PORTEOUVERTE:
			return stateVector[0] == State.MICROWAVE_PORTEOUVERTE;
		case MICROWAVE_CUISSON:
			return stateVector[0].ordinal() >= State.
					MICROWAVE_CUISSON.ordinal()&& stateVector[0].ordinal() <= State.MICROWAVE_CUISSON_CUISSON_FIN_BEEP_ALARMEINACTIVE.ordinal();
		case MICROWAVE_CUISSON_CUISSON_HIGH:
			return stateVector[0] == State.MICROWAVE_CUISSON_CUISSON_HIGH;
		case MICROWAVE_CUISSON_CUISSON_LOW:
			return stateVector[0] == State.MICROWAVE_CUISSON_CUISSON_LOW;
		case MICROWAVE_CUISSON_CUISSON_ENTRERTEMPS:
			return stateVector[0].ordinal() >= State.
					MICROWAVE_CUISSON_CUISSON_ENTRERTEMPS.ordinal()&& stateVector[0].ordinal() <= State.MICROWAVE_CUISSON_CUISSON_ENTRERTEMPS_DIGITS_ENTRERNUMEROS.ordinal();
		case MICROWAVE_CUISSON_CUISSON_ENTRERTEMPS_DIGITS_ENTRERNUMEROS:
			return stateVector[0] == State.MICROWAVE_CUISSON_CUISSON_ENTRERTEMPS_DIGITS_ENTRERNUMEROS;
		case MICROWAVE_CUISSON_CUISSON_DEBUT:
			return stateVector[0].ordinal() >= State.
					MICROWAVE_CUISSON_CUISSON_DEBUT.ordinal()&& stateVector[0].ordinal() <= State.MICROWAVE_CUISSON_CUISSON_DEBUT_COMPTEUR_IDLE.ordinal();
		case MICROWAVE_CUISSON_CUISSON_DEBUT_COMPTEUR_ITERATION:
			return stateVector[0].ordinal() >= State.
					MICROWAVE_CUISSON_CUISSON_DEBUT_COMPTEUR_ITERATION.ordinal()&& stateVector[0].ordinal() <= State.MICROWAVE_CUISSON_CUISSON_DEBUT_COMPTEUR_ITERATION_ITERATION_SECONDE_TIMERSECONDS.ordinal();
		case MICROWAVE_CUISSON_CUISSON_DEBUT_COMPTEUR_ITERATION_ITERATION_SECONDE_TIMERMINUTE:
			return stateVector[0] == State.MICROWAVE_CUISSON_CUISSON_DEBUT_COMPTEUR_ITERATION_ITERATION_SECONDE_TIMERMINUTE;
		case MICROWAVE_CUISSON_CUISSON_DEBUT_COMPTEUR_ITERATION_ITERATION_SECONDE_TIMERSECONDS:
			return stateVector[0] == State.MICROWAVE_CUISSON_CUISSON_DEBUT_COMPTEUR_ITERATION_ITERATION_SECONDE_TIMERSECONDS;
		case MICROWAVE_CUISSON_CUISSON_DEBUT_COMPTEUR_IDLE:
			return stateVector[0] == State.MICROWAVE_CUISSON_CUISSON_DEBUT_COMPTEUR_IDLE;
		case MICROWAVE_CUISSON_CUISSON_FIN:
			return stateVector[0].ordinal() >= State.
					MICROWAVE_CUISSON_CUISSON_FIN.ordinal()&& stateVector[0].ordinal() <= State.MICROWAVE_CUISSON_CUISSON_FIN_BEEP_ALARMEINACTIVE.ordinal();
		case MICROWAVE_CUISSON_CUISSON_FIN_BEEP_ALARMEACTIVE:
			return stateVector[0] == State.MICROWAVE_CUISSON_CUISSON_FIN_BEEP_ALARMEACTIVE;
		case MICROWAVE_CUISSON_CUISSON_FIN_BEEP_ALARMEINACTIVE:
			return stateVector[0] == State.MICROWAVE_CUISSON_CUISSON_FIN_BEEP_ALARMEINACTIVE;
		case MICROWAVE_PORTEOUVERTECUISSON:
			return stateVector[0] == State.MICROWAVE_PORTEOUVERTECUISSON;
		default:
			return false;
		}
	}
	
	public void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public void raiseTimeEvent(int eventID) {
		inEventQueue.add(() -> {
			timeEvents[eventID] = true;
		});
		runCycle();
	}
	
	
	public interface OperationCallback {
	
		public void displayTime(long t);
		
		public void display(String msg);
		
		public void clearDisplay();
		
		public void cook();
		
		public void stopCook();
		
		public void beepOn();
		
		public void beepOff();
		
		public void closeDoor();
		
		public void openDoor();
		
	}
	
	private OperationCallback operationCallback;
	
	public void setOperationCallback(OperationCallback operationCallback) {
		this.operationCallback = operationCallback;
	}
	
	private boolean high;
	
	
	public void raiseHigh() {
		inEventQueue.add(() -> {
			high = true;
		});
		runCycle();
	}
	
	private boolean low;
	
	
	public void raiseLow() {
		inEventQueue.add(() -> {
			low = true;
		});
		runCycle();
	}
	
	private boolean digit;
	
	private long digitValue;
	
	
	public void raiseDigit(final long value) {
		inEventQueue.add(() -> {
			digitValue = value;
			digit = true;
		});
		runCycle();
	}
	protected long getDigitValue() {
		if (! digit ) 
			throw new IllegalStateException("Illegal event value access. Event Digit is not raised!");
		return digitValue;
	}
	
	private boolean timer;
	
	
	public void raiseTimer() {
		inEventQueue.add(() -> {
			timer = true;
		});
		runCycle();
	}
	
	private boolean start;
	
	
	public void raiseStart() {
		inEventQueue.add(() -> {
			start = true;
		});
		runCycle();
	}
	
	private boolean stop;
	
	
	public void raiseStop() {
		inEventQueue.add(() -> {
			stop = true;
		});
		runCycle();
	}
	
	private boolean open;
	
	
	public void raiseOpen() {
		inEventQueue.add(() -> {
			open = true;
		});
		runCycle();
	}
	
	private boolean close;
	
	
	public void raiseClose() {
		inEventQueue.add(() -> {
			close = true;
		});
		runCycle();
	}
	
	private long power;
	
	public long getPower() {
		return power;
	}
	
	public void setPower(long value) {
		this.power = value;
	}
	
	private boolean check_Microwave_Cuisson_cuisson_Debut_compteur_Iteration_iteration_seconde__choice_0_tr1_tr1() {
		return (getTime() % 100)==0;
	}
	
	private void effect_Microwave_Cuisson_cuisson_Debut_compteur_Iteration_iteration_seconde__choice_0_tr1() {
		enterSequence_Microwave_Cuisson_cuisson_Debut_compteur_Iteration_iteration_seconde_TimerMinute_default();
	}
	
	private void effect_Microwave_Cuisson_cuisson_Debut_compteur_Iteration_iteration_seconde__choice_0_tr0() {
		enterSequence_Microwave_Cuisson_cuisson_Debut_compteur_Iteration_iteration_seconde_TimerSeconds_default();
	}
	
	/* Entry action for state 'Init'. */
	private void entryAction_Microwave_Init() {
		operationCallback.clearDisplay();
		
		operationCallback.closeDoor();
		
		setTimerLength(0);
		
		setTime(0);
		
		setVal(0);
	}
	
	/* Entry action for state 'PorteOuverte'. */
	private void entryAction_Microwave_PorteOuverte() {
		operationCallback.openDoor();
	}
	
	/* Entry action for state 'High'. */
	private void entryAction_Microwave_Cuisson_cuisson_High() {
		setPower(1);
		
		operationCallback.display("High");
	}
	
	/* Entry action for state 'Low'. */
	private void entryAction_Microwave_Cuisson_cuisson_Low() {
		setPower(2);
		
		operationCallback.display("Low");
	}
	
	/* Entry action for state 'Debut'. */
	private void entryAction_Microwave_Cuisson_cuisson_Debut() {
		operationCallback.cook();
	}
	
	/* Entry action for state 'Iteration'. */
	private void entryAction_Microwave_Cuisson_cuisson_Debut_compteur_Iteration() {
		timerService.setTimer(this, 0, (1 * 1000), false);
	}
	
	/* Entry action for state 'TimerMinute'. */
	private void entryAction_Microwave_Cuisson_cuisson_Debut_compteur_Iteration_iteration_seconde_TimerMinute() {
		setTime(getTime() - 41);
	}
	
	/* Entry action for state 'TimerSeconds'. */
	private void entryAction_Microwave_Cuisson_cuisson_Debut_compteur_Iteration_iteration_seconde_TimerSeconds() {
		setTime(getTime() - 1);
	}
	
	/* Entry action for state 'Idle'. */
	private void entryAction_Microwave_Cuisson_cuisson_Debut_compteur_Idle() {
		operationCallback.displayTime(getTime());
	}
	
	/* Entry action for state 'Fin'. */
	private void entryAction_Microwave_Cuisson_cuisson_Fin() {
		timerService.setTimer(this, 1, (5 * 1000), false);
	}
	
	/* Entry action for state 'AlarmeActive'. */
	private void entryAction_Microwave_Cuisson_cuisson_Fin_beep_AlarmeActive() {
		timerService.setTimer(this, 2, 500, false);
		
		operationCallback.beepOn();
		
		operationCallback.display("Finished");
	}
	
	/* Entry action for state 'AlarmeInactive'. */
	private void entryAction_Microwave_Cuisson_cuisson_Fin_beep_AlarmeInactive() {
		timerService.setTimer(this, 3, 500, false);
		
		operationCallback.beepOff();
		
		operationCallback.clearDisplay();
	}
	
	/* Entry action for state 'PorteOuverteCuisson'. */
	private void entryAction_Microwave_PorteOuverteCuisson() {
		operationCallback.openDoor();
		
		operationCallback.display("Waiting");
	}
	
	/* Exit action for state 'PorteOuverte'. */
	private void exitAction_Microwave_PorteOuverte() {
		operationCallback.closeDoor();
	}
	
	/* Exit action for state 'Debut'. */
	private void exitAction_Microwave_Cuisson_cuisson_Debut() {
		operationCallback.stopCook();
	}
	
	/* Exit action for state 'Iteration'. */
	private void exitAction_Microwave_Cuisson_cuisson_Debut_compteur_Iteration() {
		timerService.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'Fin'. */
	private void exitAction_Microwave_Cuisson_cuisson_Fin() {
		timerService.unsetTimer(this, 1);
		
		operationCallback.beepOff();
	}
	
	/* Exit action for state 'AlarmeActive'. */
	private void exitAction_Microwave_Cuisson_cuisson_Fin_beep_AlarmeActive() {
		timerService.unsetTimer(this, 2);
	}
	
	/* Exit action for state 'AlarmeInactive'. */
	private void exitAction_Microwave_Cuisson_cuisson_Fin_beep_AlarmeInactive() {
		timerService.unsetTimer(this, 3);
	}
	
	/* Exit action for state 'PorteOuverteCuisson'. */
	private void exitAction_Microwave_PorteOuverteCuisson() {
		operationCallback.closeDoor();
	}
	
	/* 'default' enter sequence for state Init */
	private void enterSequence_Microwave_Init_default() {
		entryAction_Microwave_Init();
		stateVector[0] = State.MICROWAVE_INIT;
	}
	
	/* 'default' enter sequence for state PorteOuverte */
	private void enterSequence_Microwave_PorteOuverte_default() {
		entryAction_Microwave_PorteOuverte();
		stateVector[0] = State.MICROWAVE_PORTEOUVERTE;
	}
	
	/* 'default' enter sequence for state High */
	private void enterSequence_Microwave_Cuisson_cuisson_High_default() {
		entryAction_Microwave_Cuisson_cuisson_High();
		stateVector[0] = State.MICROWAVE_CUISSON_CUISSON_HIGH;
		
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Low */
	private void enterSequence_Microwave_Cuisson_cuisson_Low_default() {
		entryAction_Microwave_Cuisson_cuisson_Low();
		stateVector[0] = State.MICROWAVE_CUISSON_CUISSON_LOW;
		
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state EntrerTemps */
	private void enterSequence_Microwave_Cuisson_cuisson_EntrerTemps_default() {
		enterSequence_Microwave_Cuisson_cuisson_EntrerTemps_digits_default();
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state EntrerNumeros */
	private void enterSequence_Microwave_Cuisson_cuisson_EntrerTemps_digits_EntrerNumeros_default() {
		stateVector[0] = State.MICROWAVE_CUISSON_CUISSON_ENTRERTEMPS_DIGITS_ENTRERNUMEROS;
		
		historyVector[1] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Debut */
	private void enterSequence_Microwave_Cuisson_cuisson_Debut_default() {
		entryAction_Microwave_Cuisson_cuisson_Debut();
		enterSequence_Microwave_Cuisson_cuisson_Debut_compteur_default();
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Iteration */
	private void enterSequence_Microwave_Cuisson_cuisson_Debut_compteur_Iteration_default() {
		entryAction_Microwave_Cuisson_cuisson_Debut_compteur_Iteration();
		enterSequence_Microwave_Cuisson_cuisson_Debut_compteur_Iteration_iteration_seconde_default();
		historyVector[2] = stateVector[0];
	}
	
	/* 'default' enter sequence for state TimerMinute */
	private void enterSequence_Microwave_Cuisson_cuisson_Debut_compteur_Iteration_iteration_seconde_TimerMinute_default() {
		entryAction_Microwave_Cuisson_cuisson_Debut_compteur_Iteration_iteration_seconde_TimerMinute();
		stateVector[0] = State.MICROWAVE_CUISSON_CUISSON_DEBUT_COMPTEUR_ITERATION_ITERATION_SECONDE_TIMERMINUTE;
		
		historyVector[3] = stateVector[0];
	}
	
	/* 'default' enter sequence for state TimerSeconds */
	private void enterSequence_Microwave_Cuisson_cuisson_Debut_compteur_Iteration_iteration_seconde_TimerSeconds_default() {
		entryAction_Microwave_Cuisson_cuisson_Debut_compteur_Iteration_iteration_seconde_TimerSeconds();
		stateVector[0] = State.MICROWAVE_CUISSON_CUISSON_DEBUT_COMPTEUR_ITERATION_ITERATION_SECONDE_TIMERSECONDS;
		
		historyVector[3] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Idle */
	private void enterSequence_Microwave_Cuisson_cuisson_Debut_compteur_Idle_default() {
		entryAction_Microwave_Cuisson_cuisson_Debut_compteur_Idle();
		stateVector[0] = State.MICROWAVE_CUISSON_CUISSON_DEBUT_COMPTEUR_IDLE;
		
		historyVector[2] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Fin */
	private void enterSequence_Microwave_Cuisson_cuisson_Fin_default() {
		entryAction_Microwave_Cuisson_cuisson_Fin();
		enterSequence_Microwave_Cuisson_cuisson_Fin_beep_default();
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state AlarmeActive */
	private void enterSequence_Microwave_Cuisson_cuisson_Fin_beep_AlarmeActive_default() {
		entryAction_Microwave_Cuisson_cuisson_Fin_beep_AlarmeActive();
		stateVector[0] = State.MICROWAVE_CUISSON_CUISSON_FIN_BEEP_ALARMEACTIVE;
		
		historyVector[4] = stateVector[0];
	}
	
	/* 'default' enter sequence for state AlarmeInactive */
	private void enterSequence_Microwave_Cuisson_cuisson_Fin_beep_AlarmeInactive_default() {
		entryAction_Microwave_Cuisson_cuisson_Fin_beep_AlarmeInactive();
		stateVector[0] = State.MICROWAVE_CUISSON_CUISSON_FIN_BEEP_ALARMEINACTIVE;
		
		historyVector[4] = stateVector[0];
	}
	
	/* 'default' enter sequence for state PorteOuverteCuisson */
	private void enterSequence_Microwave_PorteOuverteCuisson_default() {
		entryAction_Microwave_PorteOuverteCuisson();
		stateVector[0] = State.MICROWAVE_PORTEOUVERTECUISSON;
	}
	
	/* 'default' enter sequence for region Microwave */
	private void enterSequence_Microwave_default() {
		react_Microwave__entry_Default();
	}
	
	/* deep enterSequence with history in child cuisson */
	private void deepEnterSequence_Microwave_Cuisson_cuisson() {
		switch (historyVector[0]) {
		case MICROWAVE_CUISSON_CUISSON_HIGH:
			enterSequence_Microwave_Cuisson_cuisson_High_default();
			break;
		case MICROWAVE_CUISSON_CUISSON_LOW:
			enterSequence_Microwave_Cuisson_cuisson_Low_default();
			break;
		case MICROWAVE_CUISSON_CUISSON_ENTRERTEMPS_DIGITS_ENTRERNUMEROS:
			deepEnterSequence_Microwave_Cuisson_cuisson_EntrerTemps_digits();
			break;
		case MICROWAVE_CUISSON_CUISSON_DEBUT_COMPTEUR_ITERATION_ITERATION_SECONDE_TIMERMINUTE:
			entryAction_Microwave_Cuisson_cuisson_Debut();
			deepEnterSequence_Microwave_Cuisson_cuisson_Debut_compteur();
			break;
		case MICROWAVE_CUISSON_CUISSON_DEBUT_COMPTEUR_ITERATION_ITERATION_SECONDE_TIMERSECONDS:
			entryAction_Microwave_Cuisson_cuisson_Debut();
			deepEnterSequence_Microwave_Cuisson_cuisson_Debut_compteur();
			break;
		case MICROWAVE_CUISSON_CUISSON_DEBUT_COMPTEUR_IDLE:
			entryAction_Microwave_Cuisson_cuisson_Debut();
			deepEnterSequence_Microwave_Cuisson_cuisson_Debut_compteur();
			break;
		case MICROWAVE_CUISSON_CUISSON_FIN_BEEP_ALARMEACTIVE:
			entryAction_Microwave_Cuisson_cuisson_Fin();
			deepEnterSequence_Microwave_Cuisson_cuisson_Fin_beep();
			break;
		case MICROWAVE_CUISSON_CUISSON_FIN_BEEP_ALARMEINACTIVE:
			entryAction_Microwave_Cuisson_cuisson_Fin();
			deepEnterSequence_Microwave_Cuisson_cuisson_Fin_beep();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region digits */
	private void enterSequence_Microwave_Cuisson_cuisson_EntrerTemps_digits_default() {
		react_Microwave_Cuisson_cuisson_EntrerTemps_digits__entry_Default();
	}
	
	/* deep enterSequence with history in child digits */
	private void deepEnterSequence_Microwave_Cuisson_cuisson_EntrerTemps_digits() {
		switch (historyVector[1]) {
		case MICROWAVE_CUISSON_CUISSON_ENTRERTEMPS_DIGITS_ENTRERNUMEROS:
			enterSequence_Microwave_Cuisson_cuisson_EntrerTemps_digits_EntrerNumeros_default();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region compteur */
	private void enterSequence_Microwave_Cuisson_cuisson_Debut_compteur_default() {
		react_Microwave_Cuisson_cuisson_Debut_compteur__entry_Default();
	}
	
	/* deep enterSequence with history in child compteur */
	private void deepEnterSequence_Microwave_Cuisson_cuisson_Debut_compteur() {
		switch (historyVector[2]) {
		case MICROWAVE_CUISSON_CUISSON_DEBUT_COMPTEUR_ITERATION_ITERATION_SECONDE_TIMERMINUTE:
			entryAction_Microwave_Cuisson_cuisson_Debut_compteur_Iteration();
			deepEnterSequence_Microwave_Cuisson_cuisson_Debut_compteur_Iteration_iteration_seconde();
			break;
		case MICROWAVE_CUISSON_CUISSON_DEBUT_COMPTEUR_ITERATION_ITERATION_SECONDE_TIMERSECONDS:
			entryAction_Microwave_Cuisson_cuisson_Debut_compteur_Iteration();
			deepEnterSequence_Microwave_Cuisson_cuisson_Debut_compteur_Iteration_iteration_seconde();
			break;
		case MICROWAVE_CUISSON_CUISSON_DEBUT_COMPTEUR_IDLE:
			enterSequence_Microwave_Cuisson_cuisson_Debut_compteur_Idle_default();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region iteration seconde */
	private void enterSequence_Microwave_Cuisson_cuisson_Debut_compteur_Iteration_iteration_seconde_default() {
		react_Microwave_Cuisson_cuisson_Debut_compteur_Iteration_iteration_seconde__entry_Default();
	}
	
	/* deep enterSequence with history in child iteration seconde */
	private void deepEnterSequence_Microwave_Cuisson_cuisson_Debut_compteur_Iteration_iteration_seconde() {
		switch (historyVector[3]) {
		case MICROWAVE_CUISSON_CUISSON_DEBUT_COMPTEUR_ITERATION_ITERATION_SECONDE_TIMERMINUTE:
			enterSequence_Microwave_Cuisson_cuisson_Debut_compteur_Iteration_iteration_seconde_TimerMinute_default();
			break;
		case MICROWAVE_CUISSON_CUISSON_DEBUT_COMPTEUR_ITERATION_ITERATION_SECONDE_TIMERSECONDS:
			enterSequence_Microwave_Cuisson_cuisson_Debut_compteur_Iteration_iteration_seconde_TimerSeconds_default();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region beep */
	private void enterSequence_Microwave_Cuisson_cuisson_Fin_beep_default() {
		react_Microwave_Cuisson_cuisson_Fin_beep__entry_Default();
	}
	
	/* deep enterSequence with history in child beep */
	private void deepEnterSequence_Microwave_Cuisson_cuisson_Fin_beep() {
		switch (historyVector[4]) {
		case MICROWAVE_CUISSON_CUISSON_FIN_BEEP_ALARMEACTIVE:
			enterSequence_Microwave_Cuisson_cuisson_Fin_beep_AlarmeActive_default();
			break;
		case MICROWAVE_CUISSON_CUISSON_FIN_BEEP_ALARMEINACTIVE:
			enterSequence_Microwave_Cuisson_cuisson_Fin_beep_AlarmeInactive_default();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for state Init */
	private void exitSequence_Microwave_Init() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state PorteOuverte */
	private void exitSequence_Microwave_PorteOuverte() {
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_Microwave_PorteOuverte();
	}
	
	/* Default exit sequence for state Cuisson */
	private void exitSequence_Microwave_Cuisson() {
		exitSequence_Microwave_Cuisson_cuisson();
	}
	
	/* Default exit sequence for state High */
	private void exitSequence_Microwave_Cuisson_cuisson_High() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Low */
	private void exitSequence_Microwave_Cuisson_cuisson_Low() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state EntrerTemps */
	private void exitSequence_Microwave_Cuisson_cuisson_EntrerTemps() {
		exitSequence_Microwave_Cuisson_cuisson_EntrerTemps_digits();
	}
	
	/* Default exit sequence for state EntrerNumeros */
	private void exitSequence_Microwave_Cuisson_cuisson_EntrerTemps_digits_EntrerNumeros() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Debut */
	private void exitSequence_Microwave_Cuisson_cuisson_Debut() {
		exitSequence_Microwave_Cuisson_cuisson_Debut_compteur();
		exitAction_Microwave_Cuisson_cuisson_Debut();
	}
	
	/* Default exit sequence for state Iteration */
	private void exitSequence_Microwave_Cuisson_cuisson_Debut_compteur_Iteration() {
		exitSequence_Microwave_Cuisson_cuisson_Debut_compteur_Iteration_iteration_seconde();
		exitAction_Microwave_Cuisson_cuisson_Debut_compteur_Iteration();
	}
	
	/* Default exit sequence for state TimerMinute */
	private void exitSequence_Microwave_Cuisson_cuisson_Debut_compteur_Iteration_iteration_seconde_TimerMinute() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state TimerSeconds */
	private void exitSequence_Microwave_Cuisson_cuisson_Debut_compteur_Iteration_iteration_seconde_TimerSeconds() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Idle */
	private void exitSequence_Microwave_Cuisson_cuisson_Debut_compteur_Idle() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state AlarmeActive */
	private void exitSequence_Microwave_Cuisson_cuisson_Fin_beep_AlarmeActive() {
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_Microwave_Cuisson_cuisson_Fin_beep_AlarmeActive();
	}
	
	/* Default exit sequence for state AlarmeInactive */
	private void exitSequence_Microwave_Cuisson_cuisson_Fin_beep_AlarmeInactive() {
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_Microwave_Cuisson_cuisson_Fin_beep_AlarmeInactive();
	}
	
	/* Default exit sequence for state PorteOuverteCuisson */
	private void exitSequence_Microwave_PorteOuverteCuisson() {
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_Microwave_PorteOuverteCuisson();
	}
	
	/* Default exit sequence for region Microwave */
	private void exitSequence_Microwave() {
		switch (stateVector[0]) {
		case MICROWAVE_INIT:
			exitSequence_Microwave_Init();
			break;
		case MICROWAVE_PORTEOUVERTE:
			exitSequence_Microwave_PorteOuverte();
			break;
		case MICROWAVE_CUISSON_CUISSON_HIGH:
			exitSequence_Microwave_Cuisson_cuisson_High();
			break;
		case MICROWAVE_CUISSON_CUISSON_LOW:
			exitSequence_Microwave_Cuisson_cuisson_Low();
			break;
		case MICROWAVE_CUISSON_CUISSON_ENTRERTEMPS_DIGITS_ENTRERNUMEROS:
			exitSequence_Microwave_Cuisson_cuisson_EntrerTemps_digits_EntrerNumeros();
			break;
		case MICROWAVE_CUISSON_CUISSON_DEBUT_COMPTEUR_ITERATION_ITERATION_SECONDE_TIMERMINUTE:
			exitSequence_Microwave_Cuisson_cuisson_Debut_compteur_Iteration_iteration_seconde_TimerMinute();
			exitAction_Microwave_Cuisson_cuisson_Debut_compteur_Iteration();
			exitAction_Microwave_Cuisson_cuisson_Debut();
			break;
		case MICROWAVE_CUISSON_CUISSON_DEBUT_COMPTEUR_ITERATION_ITERATION_SECONDE_TIMERSECONDS:
			exitSequence_Microwave_Cuisson_cuisson_Debut_compteur_Iteration_iteration_seconde_TimerSeconds();
			exitAction_Microwave_Cuisson_cuisson_Debut_compteur_Iteration();
			exitAction_Microwave_Cuisson_cuisson_Debut();
			break;
		case MICROWAVE_CUISSON_CUISSON_DEBUT_COMPTEUR_IDLE:
			exitSequence_Microwave_Cuisson_cuisson_Debut_compteur_Idle();
			exitAction_Microwave_Cuisson_cuisson_Debut();
			break;
		case MICROWAVE_CUISSON_CUISSON_FIN_BEEP_ALARMEACTIVE:
			exitSequence_Microwave_Cuisson_cuisson_Fin_beep_AlarmeActive();
			exitAction_Microwave_Cuisson_cuisson_Fin();
			break;
		case MICROWAVE_CUISSON_CUISSON_FIN_BEEP_ALARMEINACTIVE:
			exitSequence_Microwave_Cuisson_cuisson_Fin_beep_AlarmeInactive();
			exitAction_Microwave_Cuisson_cuisson_Fin();
			break;
		case MICROWAVE_PORTEOUVERTECUISSON:
			exitSequence_Microwave_PorteOuverteCuisson();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region cuisson */
	private void exitSequence_Microwave_Cuisson_cuisson() {
		switch (stateVector[0]) {
		case MICROWAVE_CUISSON_CUISSON_HIGH:
			exitSequence_Microwave_Cuisson_cuisson_High();
			break;
		case MICROWAVE_CUISSON_CUISSON_LOW:
			exitSequence_Microwave_Cuisson_cuisson_Low();
			break;
		case MICROWAVE_CUISSON_CUISSON_ENTRERTEMPS_DIGITS_ENTRERNUMEROS:
			exitSequence_Microwave_Cuisson_cuisson_EntrerTemps_digits_EntrerNumeros();
			break;
		case MICROWAVE_CUISSON_CUISSON_DEBUT_COMPTEUR_ITERATION_ITERATION_SECONDE_TIMERMINUTE:
			exitSequence_Microwave_Cuisson_cuisson_Debut_compteur_Iteration_iteration_seconde_TimerMinute();
			exitAction_Microwave_Cuisson_cuisson_Debut_compteur_Iteration();
			exitAction_Microwave_Cuisson_cuisson_Debut();
			break;
		case MICROWAVE_CUISSON_CUISSON_DEBUT_COMPTEUR_ITERATION_ITERATION_SECONDE_TIMERSECONDS:
			exitSequence_Microwave_Cuisson_cuisson_Debut_compteur_Iteration_iteration_seconde_TimerSeconds();
			exitAction_Microwave_Cuisson_cuisson_Debut_compteur_Iteration();
			exitAction_Microwave_Cuisson_cuisson_Debut();
			break;
		case MICROWAVE_CUISSON_CUISSON_DEBUT_COMPTEUR_IDLE:
			exitSequence_Microwave_Cuisson_cuisson_Debut_compteur_Idle();
			exitAction_Microwave_Cuisson_cuisson_Debut();
			break;
		case MICROWAVE_CUISSON_CUISSON_FIN_BEEP_ALARMEACTIVE:
			exitSequence_Microwave_Cuisson_cuisson_Fin_beep_AlarmeActive();
			exitAction_Microwave_Cuisson_cuisson_Fin();
			break;
		case MICROWAVE_CUISSON_CUISSON_FIN_BEEP_ALARMEINACTIVE:
			exitSequence_Microwave_Cuisson_cuisson_Fin_beep_AlarmeInactive();
			exitAction_Microwave_Cuisson_cuisson_Fin();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region digits */
	private void exitSequence_Microwave_Cuisson_cuisson_EntrerTemps_digits() {
		switch (stateVector[0]) {
		case MICROWAVE_CUISSON_CUISSON_ENTRERTEMPS_DIGITS_ENTRERNUMEROS:
			exitSequence_Microwave_Cuisson_cuisson_EntrerTemps_digits_EntrerNumeros();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region compteur */
	private void exitSequence_Microwave_Cuisson_cuisson_Debut_compteur() {
		switch (stateVector[0]) {
		case MICROWAVE_CUISSON_CUISSON_DEBUT_COMPTEUR_ITERATION_ITERATION_SECONDE_TIMERMINUTE:
			exitSequence_Microwave_Cuisson_cuisson_Debut_compteur_Iteration_iteration_seconde_TimerMinute();
			exitAction_Microwave_Cuisson_cuisson_Debut_compteur_Iteration();
			break;
		case MICROWAVE_CUISSON_CUISSON_DEBUT_COMPTEUR_ITERATION_ITERATION_SECONDE_TIMERSECONDS:
			exitSequence_Microwave_Cuisson_cuisson_Debut_compteur_Iteration_iteration_seconde_TimerSeconds();
			exitAction_Microwave_Cuisson_cuisson_Debut_compteur_Iteration();
			break;
		case MICROWAVE_CUISSON_CUISSON_DEBUT_COMPTEUR_IDLE:
			exitSequence_Microwave_Cuisson_cuisson_Debut_compteur_Idle();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region iteration seconde */
	private void exitSequence_Microwave_Cuisson_cuisson_Debut_compteur_Iteration_iteration_seconde() {
		switch (stateVector[0]) {
		case MICROWAVE_CUISSON_CUISSON_DEBUT_COMPTEUR_ITERATION_ITERATION_SECONDE_TIMERMINUTE:
			exitSequence_Microwave_Cuisson_cuisson_Debut_compteur_Iteration_iteration_seconde_TimerMinute();
			break;
		case MICROWAVE_CUISSON_CUISSON_DEBUT_COMPTEUR_ITERATION_ITERATION_SECONDE_TIMERSECONDS:
			exitSequence_Microwave_Cuisson_cuisson_Debut_compteur_Iteration_iteration_seconde_TimerSeconds();
			break;
		default:
			break;
		}
	}
	
	/* The reactions of state null. */
	private void react_Microwave_Cuisson_cuisson_Debut_compteur_Iteration_iteration_seconde__choice_0() {
		if (check_Microwave_Cuisson_cuisson_Debut_compteur_Iteration_iteration_seconde__choice_0_tr1_tr1()) {
			effect_Microwave_Cuisson_cuisson_Debut_compteur_Iteration_iteration_seconde__choice_0_tr1();
		} else {
			effect_Microwave_Cuisson_cuisson_Debut_compteur_Iteration_iteration_seconde__choice_0_tr0();
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_Microwave__entry_Default() {
		enterSequence_Microwave_Init_default();
	}
	
	/* Default react sequence for deep history entry  */
	private void react_Microwave_Cuisson_cuisson__entry_Default() {
		/* Enter the region with deep history */
		if (historyVector[0] != State.$NULLSTATE$) {
			deepEnterSequence_Microwave_Cuisson_cuisson();
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_Microwave_Cuisson_cuisson_EntrerTemps_digits__entry_Default() {
		enterSequence_Microwave_Cuisson_cuisson_EntrerTemps_digits_EntrerNumeros_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Microwave_Cuisson_cuisson_Debut_compteur__entry_Default() {
		enterSequence_Microwave_Cuisson_cuisson_Debut_compteur_Idle_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Microwave_Cuisson_cuisson_Debut_compteur_Iteration_iteration_seconde__entry_Default() {
		react_Microwave_Cuisson_cuisson_Debut_compteur_Iteration_iteration_seconde__choice_0();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Microwave_Cuisson_cuisson_Fin_beep__entry_Default() {
		enterSequence_Microwave_Cuisson_cuisson_Fin_beep_AlarmeActive_default();
	}
	
	private long react(long transitioned_before) {
		return transitioned_before;
	}
	
	private long microwave_Init_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		transitioned_after = react(transitioned_before);
		
		if (transitioned_after<0) {
			if (open) {
				exitSequence_Microwave_Init();
				enterSequence_Microwave_PorteOuverte_default();
				transitioned_after = 0;
			} else {
				if (high) {
					exitSequence_Microwave_Init();
					enterSequence_Microwave_Cuisson_cuisson_High_default();
					transitioned_after = 0;
				} else {
					if (low) {
						exitSequence_Microwave_Init();
						enterSequence_Microwave_Cuisson_cuisson_Low_default();
						transitioned_after = 0;
					}
				}
			}
		}
		return transitioned_after;
	}
	
	private long microwave_PorteOuverte_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		transitioned_after = react(transitioned_before);
		
		if (transitioned_after<0) {
			if (close) {
				exitSequence_Microwave_PorteOuverte();
				enterSequence_Microwave_Init_default();
				transitioned_after = 0;
			}
		}
		return transitioned_after;
	}
	
	private long microwave_Cuisson_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		transitioned_after = react(transitioned_before);
		
		if (transitioned_after<0) {
			if (stop) {
				exitSequence_Microwave_Cuisson();
				enterSequence_Microwave_Init_default();
				transitioned_after = 0;
			} else {
				if (open) {
					exitSequence_Microwave_Cuisson();
					enterSequence_Microwave_PorteOuverteCuisson_default();
					transitioned_after = 0;
				}
			}
		}
		return transitioned_after;
	}
	
	private long microwave_Cuisson_cuisson_High_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		transitioned_after = microwave_Cuisson_react(transitioned_before);
		
		if (transitioned_after<0) {
			if (low) {
				exitSequence_Microwave_Cuisson_cuisson_High();
				enterSequence_Microwave_Cuisson_cuisson_Low_default();
				transitioned_after = 0;
			} else {
				if (timer) {
					exitSequence_Microwave_Cuisson_cuisson_High();
					enterSequence_Microwave_Cuisson_cuisson_EntrerTemps_default();
					transitioned_after = 0;
				}
			}
		}
		return transitioned_after;
	}
	
	private long microwave_Cuisson_cuisson_Low_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		transitioned_after = microwave_Cuisson_react(transitioned_before);
		
		if (transitioned_after<0) {
			if (high) {
				exitSequence_Microwave_Cuisson_cuisson_Low();
				enterSequence_Microwave_Cuisson_cuisson_High_default();
				transitioned_after = 0;
			} else {
				if (timer) {
					exitSequence_Microwave_Cuisson_cuisson_Low();
					enterSequence_Microwave_Cuisson_cuisson_EntrerTemps_default();
					transitioned_after = 0;
				}
			}
		}
		return transitioned_after;
	}
	
	private long microwave_Cuisson_cuisson_EntrerTemps_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		transitioned_after = microwave_Cuisson_react(transitioned_before);
		
		if (transitioned_after<0) {
			if (start) {
				exitSequence_Microwave_Cuisson_cuisson_EntrerTemps();
				enterSequence_Microwave_Cuisson_cuisson_Debut_default();
				transitioned_after = 0;
			}
		}
		return transitioned_after;
	}
	
	private long microwave_Cuisson_cuisson_EntrerTemps_digits_EntrerNumeros_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		transitioned_after = microwave_Cuisson_cuisson_EntrerTemps_react(transitioned_before);
		
		if (transitioned_after<0) {
			if (((digit) && (getTimerLength()<4))) {
				exitSequence_Microwave_Cuisson_cuisson_EntrerTemps_digits_EntrerNumeros();
				setVal(getDigitValue());
				
				setTime(getTime() * 10);
				
				setTime(getTime() + val);
				
				timerLength++;
				
				operationCallback.displayTime(getTime());
				
				enterSequence_Microwave_Cuisson_cuisson_EntrerTemps_digits_EntrerNumeros_default();
				transitioned_after = 0;
			}
		}
		return transitioned_after;
	}
	
	private long microwave_Cuisson_cuisson_Debut_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		transitioned_after = microwave_Cuisson_react(transitioned_before);
		
		if (transitioned_after<0) {
			if (getTime()==0) {
				exitSequence_Microwave_Cuisson_cuisson_Debut();
				enterSequence_Microwave_Cuisson_cuisson_Fin_default();
				transitioned_after = 0;
			}
		}
		return transitioned_after;
	}
	
	private long microwave_Cuisson_cuisson_Debut_compteur_Iteration_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		transitioned_after = microwave_Cuisson_cuisson_Debut_react(transitioned_before);
		
		if (transitioned_after<0) {
			if (timeEvents[0]) {
				exitSequence_Microwave_Cuisson_cuisson_Debut_compteur_Iteration();
				enterSequence_Microwave_Cuisson_cuisson_Debut_compteur_Idle_default();
				transitioned_after = 0;
			}
		}
		return transitioned_after;
	}
	
	private long microwave_Cuisson_cuisson_Debut_compteur_Iteration_iteration_seconde_TimerMinute_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		transitioned_after = microwave_Cuisson_cuisson_Debut_compteur_Iteration_react(transitioned_before);
		
		if (transitioned_after<0) {
		}
		return transitioned_after;
	}
	
	private long microwave_Cuisson_cuisson_Debut_compteur_Iteration_iteration_seconde_TimerSeconds_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		transitioned_after = microwave_Cuisson_cuisson_Debut_compteur_Iteration_react(transitioned_before);
		
		if (transitioned_after<0) {
		}
		return transitioned_after;
	}
	
	private long microwave_Cuisson_cuisson_Debut_compteur_Idle_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		transitioned_after = microwave_Cuisson_cuisson_Debut_react(transitioned_before);
		
		if (transitioned_after<0) {
			if (getTime()!=0) {
				exitSequence_Microwave_Cuisson_cuisson_Debut_compteur_Idle();
				enterSequence_Microwave_Cuisson_cuisson_Debut_compteur_Iteration_default();
				transitioned_after = 0;
			}
		}
		return transitioned_after;
	}
	
	private long microwave_Cuisson_cuisson_Fin_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		transitioned_after = microwave_Cuisson_react(transitioned_before);
		
		if (transitioned_after<0) {
			if (timeEvents[1]) {
				exitSequence_Microwave_Cuisson();
				enterSequence_Microwave_Init_default();
				transitioned_after = 0;
			}
		}
		return transitioned_after;
	}
	
	private long microwave_Cuisson_cuisson_Fin_beep_AlarmeActive_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		transitioned_after = microwave_Cuisson_cuisson_Fin_react(transitioned_before);
		
		if (transitioned_after<0) {
			if (timeEvents[2]) {
				exitSequence_Microwave_Cuisson_cuisson_Fin_beep_AlarmeActive();
				enterSequence_Microwave_Cuisson_cuisson_Fin_beep_AlarmeInactive_default();
				transitioned_after = 0;
			}
		}
		return transitioned_after;
	}
	
	private long microwave_Cuisson_cuisson_Fin_beep_AlarmeInactive_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		transitioned_after = microwave_Cuisson_cuisson_Fin_react(transitioned_before);
		
		if (transitioned_after<0) {
			if (timeEvents[3]) {
				exitSequence_Microwave_Cuisson_cuisson_Fin_beep_AlarmeInactive();
				enterSequence_Microwave_Cuisson_cuisson_Fin_beep_AlarmeActive_default();
				transitioned_after = 0;
			}
		}
		return transitioned_after;
	}
	
	private long microwave_PorteOuverteCuisson_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		transitioned_after = react(transitioned_before);
		
		if (transitioned_after<0) {
			if (close) {
				exitSequence_Microwave_PorteOuverteCuisson();
				react_Microwave_Cuisson_cuisson__entry_Default();
				transitioned_after = 0;
			}
		}
		return transitioned_after;
	}
	
}
